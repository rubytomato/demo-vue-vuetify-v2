{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack:///./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack:///../../../src/components/VGrid/VContainer.ts","webpack:///../../src/util/mergeData.ts","webpack:///../../../src/components/VGrid/grid.ts"],"names":["_arrayWithoutHoles","arr","Array","isArray","arrayLikeToArray","_iterableToArray","iter","Symbol","iterator","Object","from","_nonIterableSpread","TypeError","_toConsumableArray","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","name","functional","props","id","tag","type","default","fluid","render","children","attrs","data","classes","key","value","h","staticClass","class","pattern","styleList","styleProp","parseStyle","styleMap","style","s","val","mergeTarget","i","arguments","mergeClasses","mergeStyles","mergeListeners","prop","target","source"],"mappings":"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","file":"js/Alert~Avatar~Badge~Button~Button2~ButtonGroup~Calendar~Card~Chip~ChipGroup~Dialog~Footer~Grid~GridP1~ee025c1a.f3a78e26.js","sourcesContent":["import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import './_grid.sass'\nimport './VGrid.sass'\n\nimport Grid from './grid'\n\nimport mergeData from '../../util/mergeData'\n\n/* @vue/component */\nexport default Grid('container').extend({\n  name: 'v-container',\n  functional: true,\n  props: {\n    id: String,\n    tag: {\n      type: String,\n      default: 'div',\n    },\n    fluid: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  render (h, { props, data, children }) {\n    let classes\n    const { attrs } = data\n    if (attrs) {\n      // reset attrs to extract utility clases like pa-3\n      data.attrs = {}\n      classes = Object.keys(attrs).filter(key => {\n        // TODO: Remove once resolved\n        // https://github.com/vuejs/vue/issues/7841\n        if (key === 'slot') return false\n\n        const value = attrs[key]\n\n        // add back data attributes like data-test=\"foo\" but do not\n        // add them as classes\n        if (key.startsWith('data-')) {\n          data.attrs![key] = value\n          return false\n        }\n\n        return value || typeof value === 'string'\n      })\n    }\n\n    if (props.id) {\n      data.domProps = data.domProps || {}\n      data.domProps.id = props.id\n    }\n\n    return h(\n      props.tag,\n      mergeData(data, {\n        staticClass: 'container',\n        class: Array<any>({\n          'container--fluid': props.fluid,\n        }).concat(classes || []),\n      }),\n      children\n    )\n  },\n})\n","/**\n * @copyright 2017 Alex Regan\n * @license MIT\n * @see https://github.com/alexsasharegan/vue-functional-data-merge\n */\n/* eslint-disable max-statements */\nimport { VNodeData } from 'vue'\nimport { camelize, wrapInArray } from './helpers'\n\nconst pattern = {\n  styleList: /;(?![^(]*\\))/g,\n  styleProp: /:(.*)/,\n} as const\n\nfunction parseStyle (style: string) {\n  const styleMap: Dictionary<any> = {}\n\n  for (const s of style.split(pattern.styleList)) {\n    let [key, val] = s.split(pattern.styleProp)\n    key = key.trim()\n    if (!key) {\n      continue\n    }\n    // May be undefined if the `key: value` pair is incomplete.\n    if (typeof val === 'string') {\n      val = val.trim()\n    }\n    styleMap[camelize(key)] = val\n  }\n\n  return styleMap\n}\n\n/**\n * Intelligently merges data for createElement.\n * Merges arguments left to right, preferring the right argument.\n * Returns new VNodeData object.\n */\nexport default function mergeData (...vNodeData: VNodeData[]): VNodeData\nexport default function mergeData (): VNodeData {\n  const mergeTarget: VNodeData & Dictionary<any> = {}\n  let i: number = arguments.length\n  let prop: string\n\n  // Allow for variadic argument length.\n  while (i--) {\n    // Iterate through the data properties and execute merge strategies\n    // Object.keys eliminates need for hasOwnProperty call\n    for (prop of Object.keys(arguments[i])) {\n      switch (prop) {\n        // Array merge strategy (array concatenation)\n        case 'class':\n        case 'directives':\n          if (arguments[i][prop]) {\n            mergeTarget[prop] = mergeClasses(mergeTarget[prop], arguments[i][prop])\n          }\n          break\n        case 'style':\n          if (arguments[i][prop]) {\n            mergeTarget[prop] = mergeStyles(mergeTarget[prop], arguments[i][prop])\n          }\n          break\n        // Space delimited string concatenation strategy\n        case 'staticClass':\n          if (!arguments[i][prop]) {\n            break\n          }\n          if (mergeTarget[prop] === undefined) {\n            mergeTarget[prop] = ''\n          }\n          if (mergeTarget[prop]) {\n            // Not an empty string, so concatenate\n            mergeTarget[prop] += ' '\n          }\n          mergeTarget[prop] += arguments[i][prop].trim()\n          break\n        // Object, the properties of which to merge via array merge strategy (array concatenation).\n        // Callback merge strategy merges callbacks to the beginning of the array,\n        // so that the last defined callback will be invoked first.\n        // This is done since to mimic how Object.assign merging\n        // uses the last given value to assign.\n        case 'on':\n        case 'nativeOn':\n          if (arguments[i][prop]) {\n            mergeTarget[prop] = mergeListeners(mergeTarget[prop], arguments[i][prop])\n          }\n          break\n        // Object merge strategy\n        case 'attrs':\n        case 'props':\n        case 'domProps':\n        case 'scopedSlots':\n        case 'staticStyle':\n        case 'hook':\n        case 'transition':\n          if (!arguments[i][prop]) {\n            break\n          }\n          if (!mergeTarget[prop]) {\n            mergeTarget[prop] = {}\n          }\n          mergeTarget[prop] = { ...arguments[i][prop], ...mergeTarget[prop] }\n          break\n        // Reassignment strategy (no merge)\n        default: // slot, key, ref, tag, show, keepAlive\n          if (!mergeTarget[prop]) {\n            mergeTarget[prop] = arguments[i][prop]\n          }\n      }\n    }\n  }\n\n  return mergeTarget\n}\n\nexport function mergeStyles (\n  target: undefined | string | object[] | object,\n  source: undefined | string | object[] | object\n) {\n  if (!target) return source\n  if (!source) return target\n\n  target = wrapInArray(typeof target === 'string' ? parseStyle(target) : target)\n\n  return (target as object[]).concat(typeof source === 'string' ? parseStyle(source) : source)\n}\n\nexport function mergeClasses (target: any, source: any) {\n  if (!source) return target\n  if (!target) return source\n\n  return target ? wrapInArray(target).concat(source) : source\n}\n\nexport function mergeListeners (\n  target: { [key: string]: Function | Function[] } | undefined,\n  source: { [key: string]: Function | Function[] } | undefined\n) {\n  if (!target) return source\n  if (!source) return target\n\n  let event: string\n\n  for (event of Object.keys(source)) {\n    // Concat function to array of functions if callback present.\n    if (target[event]) {\n      // Insert current iteration data in beginning of merged array.\n      target[event] = wrapInArray(target[event])\n      ;(target[event] as Function[]).push(...wrapInArray(source[event]))\n    } else {\n      // Straight assign.\n      target[event] = source[event]\n    }\n  }\n\n  return target\n}\n","// Types\nimport Vue, { VNode } from 'vue'\n\nexport default function VGrid (name: string) {\n  /* @vue/component */\n  return Vue.extend({\n    name: `v-${name}`,\n\n    functional: true,\n\n    props: {\n      id: String,\n      tag: {\n        type: String,\n        default: 'div',\n      },\n    },\n\n    render (h, { props, data, children }): VNode {\n      data.staticClass = (`${name} ${data.staticClass || ''}`).trim()\n\n      const { attrs } = data\n      if (attrs) {\n        // reset attrs to extract utility clases like pa-3\n        data.attrs = {}\n        const classes = Object.keys(attrs).filter(key => {\n          // TODO: Remove once resolved\n          // https://github.com/vuejs/vue/issues/7841\n          if (key === 'slot') return false\n\n          const value = attrs[key]\n\n          // add back data attributes like data-test=\"foo\" but do not\n          // add them as classes\n          if (key.startsWith('data-')) {\n            data.attrs![key] = value\n            return false\n          }\n\n          return value || typeof value === 'string'\n        })\n\n        if (classes.length) data.staticClass += ` ${classes.join(' ')}`\n      }\n\n      if (props.id) {\n        data.domProps = data.domProps || {}\n        data.domProps.id = props.id\n      }\n\n      return h(props.tag, data, children)\n    },\n  })\n}\n"],"sourceRoot":""}